#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "cassandra.h"

CassUuidGen* uuid_gen;

CassError select_from_tuple(CassSession* session) {
  CassError rc = CASS_OK;
  CassStatement* statement = NULL;
  CassFuture* future = NULL;

  const char* query = "SELECT * FROM excelsior.test";

  statement = cass_statement_new(query, 0);

  future = cass_session_execute(session, statement);
  cass_future_wait(future);

  rc = cass_future_error_code(future);
  if (rc != CASS_OK) {
    printf("error");
  } else {
    const CassResult* result = NULL;
    CassIterator* rows = NULL;

    result = cass_future_get_result(future);
    rows = cass_iterator_from_result(result);

    while(cass_iterator_next(rows)) {
      CassUuid id;
      char id_str[CASS_UUID_STRING_LENGTH];
      const CassRow* row = cass_iterator_get_row(rows);
      const CassValue* id_value = cass_row_get_column_by_name(row, "id");
      const CassValue* item_value = cass_row_get_column_by_name(row, "item");
      CassIterator* item = cass_iterator_from_tuple(item_value);

      cass_value_get_uuid(id_value, &id);
      cass_uuid_string(id, id_str);

      printf("id %s ", id_str);

      while(cass_iterator_next(item)) {
        const CassValue* value = cass_iterator_get_value(item);

        if (!cass_value_is_null(value)) {
          if (cass_value_type(value) == CASS_VALUE_TYPE_VARCHAR) {
            const char* text;
            size_t text_length;
            cass_value_get_string(value, &text, &text_length);
            printf("\"%.*s\" ", (int)text_length, text);
          } else if (cass_value_type(value) == CASS_VALUE_TYPE_BIGINT) {
            cass_int64_t i;
            cass_value_get_int64(value, &i);
            printf("%lld ", (long long int)i);
          } else {
            printf("<invalid> ");
          }
        } else {
          printf("<null> ");
        }
      }

      printf("\n");
    }

    cass_result_free(result);
    cass_iterator_free(rows);
  }

  cass_future_free(future);
  cass_statement_free(statement);

  return rc;
}

int main(int argc, char* argv[]) {
  /* Setup and connect to cluster */
  CassFuture* connect_future = NULL;
  CassCluster* cluster = cass_cluster_new();
  CassSession* session = cass_session_new();
  char* hosts = "127.0.0.1";

  /* Add contact points */
  cass_cluster_set_contact_points(cluster, hosts);

  /* Provide the cluster object as configuration to connect the
    * session */
  connect_future = cass_session_connect(session, cluster);
  uuid_gen = cass_uuid_gen_new();
  if (cass_future_error_code(connect_future) != CASS_OK) {
    cass_cluster_free(cluster);
    cass_session_free(session);
    return -1;
  }
  select_from_tuple(session);
  cass_cluster_free(cluster);
  cass_session_free(session);
}
